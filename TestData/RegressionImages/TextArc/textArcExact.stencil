STREAM: File
NAME: RawLines
HEADER: text
SEPARATOR: $^
SOURCE: ./AliceInWonderland.txt
SKIP: 0
STRICT: true

import Layouts
import Geometry as Geo

stream RawLines(text)

canvas main [BACKGROUND_COLOR: "BLACK"]

stream Lines (line, text)
from RawLines
   line: Count()
   words: text

stream RawWords (line, word)
from Lines
   line: line
   word: Split(text, "\\s+") >> Strip(_) -> ToLower(_)
   
stream Words (line, word)
from RawWords
   filter(stopWord !~ "true", word !~ "")
   prefilter(stopWord) : StopWords(word)
   line: line
   word: word

stream PrimeCenter ()
from Words
 () : LineIndex.query(word) -> ExtendTuple(_, line) -> LineIndex(word, ALL)
 () : WordCount(word)

layer Border[TEXT]
from Lines
   ID: line
   TEXT: text
   (X,Y):* Layout(line) 
   COLOR: @Color{Gray70}

layer Center[TEXT]
from Words
   ID: word
   TEXT: word
   (X,Y):* Centroid(word) -> Contract(X,Y) 
   REGISTRATION: "CENTER"
   (COLOR, FONT):* Freq(word) -> 
        [color] HeatScale[hot: "Gray90", cold: "Gray30"](freq) ->
   		Scale[min: 50, max:500](freq) -> @Font{_} -> (color[_], _)
  
operator Contract : Geo::Scale[by: .94]
operator Outer : CircularLayout[start:0, size: 10, ratio: -.75]
operator Inner : Geo::Scale[by: .95]
operator WordCount : Count
operator LineIndex : Dict[fields: "lines"]

operator Layout (i) -> (X,Y)
  (ALL) => (X,Y) : [Max] Max[range:ALL](i) -> [Outer] Outer(i) -> [Inner] Inner(X,Y) -> 
                   [X] LinearInterp(i, Max[_], Inner[X], Outer[X]) -> 
                   [Y] LinearInterp(i, Max[_], Inner[Y], Outer[Y]) ->
                   (X[_], Y[_])

operator Freq (word) -> (freq)
  (ALL) => freq: [count] WordCount.query(word) -> Max[range: ALL](_) -> Divide(count[_], _) 

operator Centroid (word) -> (X,Y)
  prefilter(positions) :LineIndex.query(word) -> Get(_,0) >> Layout.query(_) >- ALL
  (ALL) =>
    (X): Select[field: 0](positions) -> Mean[range: LAST](LAST)
    (Y): Select[field: 1](positions) -> Mean[range: LAST](LAST)
