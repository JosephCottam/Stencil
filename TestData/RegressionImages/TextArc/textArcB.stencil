STREAM: File
NAME: RawLines
HEADER: 
SEPARATOR: 
SOURCE: 
SKIP: 0
STRICT: true

stream RawLines(words)

stream Lines (line, words)
from RawLines
   line: Counter()
   words: words

stream Words (line, word)
from Lines
   line: line
   word: split(words, "\\s+") -> strip(_)   /*Strip removes all non-letters from word front\rear*/
   
stream PrimeCentroid (X,Y)
from Words
 (X,Y) : LineIndex.get(word) -> DelimitList(_, ",", line) -> LineIndex.put(word, _)


layer Border[TEXT]
from Lines
   ID: line
   TEXT: text
   (X,Y):* CircularLayout(line) 


layer Center[TEXT]
from Words
   ID: word
   TEXT: word
   (X,Y):* Centroid(word)
   FONT_COLOR:* FreqColor(word)
   FONT_SIZE:* FreqSize(word)

operator FreqColor(word) -> (C)
  (ALL) => C: Freq(word) 
             -> HeatScale[cold: "Gray10", hot: "Gray90"](freq)

operator FreqSize(word) -> (size)
  (ALL) => size: Freq(word) 
             -> Scale[min: 0, max: 20](freq)

operator Freq (word) -> (freq)
  (ALL) => freq: Count(word) -[count]> Max[range: ALL](_) 
           -> Div(count[_], _)


operator LineIndex base Index[fields: "lines"]

operator Centroid (word) -> (X,Y)
  (ALL) =>
    (X): LineIndex.get(word) -> split(_, ",") 
            >> CircularLayout(_) >>
            Select[fields: "X"](*) -> Average(*)
    (Y):  LineIndex.get(word) -> split(_, ",") 
            >> CircularLayout(_) >>
            Select[fields: "Y"](*) -> Average(*)
            

python CircularLayout
facet init {
    from math import *
    max =0
}
facet map(Seq) -> (X,Y) {
    Seq = float(Seq) +1
    if (Seq > max): max=Seq

    radius = sqrt(max)+ max/100 * 20
    offset = (Seq/max)*360*0.01745   #to radians

    X = radius * cos(offset)
    Y = radius * sin(offset)
}
facet query(Seq) -> (X,Y) {
    Seq = float(Seq) +1

    radius = sqrt(max)+ max/100 * 20
    offset = (Seq/max)*360*0.01745   #to radians

    X = radius * cos(offset)
    Y = radius * sin(offset)
}
