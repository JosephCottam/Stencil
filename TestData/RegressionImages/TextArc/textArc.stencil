STREAM: File
NAME: RawLines
HEADER: text
SEPARATOR: $^
SOURCE: ./AliceInWonderland.txt
SKIP: 0
STRICT: true

stream RawLines(text)

stream Lines (line, text)
from RawLines
   line: Counter()
   words: text

/**TODO: Filter this output for stopwords before doing centroid stuff.*/
stream Words (line, word)
from Lines
   line: line
   word: Split(text, "\\s+") >> Strip(_)   /*Strip removes all non-letters from word front\rear*/
   
stream PrimeCentroid ()
from Words
 () : LineIndex.query(word) -> Extend(_, line) -> LineIndex.put(word, _)

operator Extend (current, more) -> (full) 
  (current = NULL) => full : more 
  (ALL)            => full : Concatenate(current, ",", more)
  
layer Border[TEXT]
from Lines
   ID: line
   TEXT: text
   (X,Y):* Layout(line) 

layer Center[TEXT]
from Words
   ID: word
   TEXT: word
   (X,Y):* Centroid(word)
   FONT_COLOR:* FreqColor(word)
   FONT_SIZE:* FreqSize(word)
   

operator FreqColor(word) -> (C)
  (ALL) => C: Freq(word) 
             -> HeatScale[cold: "Gray10", hot: "Gray90"](freq)

operator FreqSize(word) -> (size)
  (ALL) => size: Freq(word) 
             -> Scale[min: 0, max: 20](freq)

operator Freq (word) -> (freq)
  (ALL) => freq: Count(word) -[count]> Max[range: ALL](_) 
           -> Div(count[_], _)


operator LineIndex base Mapping[fields: "lines"]

/*TODO: Add a labeling facility to Fold so LineIndex/Split/Layout only need to be done once.*/
operator Centroid (word) -> (X,Y)
  (ALL) =>
    (X): LineIndex(word) -> Split(_, ",") 
            >> Layout.query(_) >-
            Select[field: 0](LAST) -> Average[range: LAST](*)
    (Y): LineIndex(word) -> Split(_, ",") 
            >> Layout.query(_) >-
            Select[field: 1](LAST) -> Average[range: LAST](*)

/*TODO: Do two circular layouts of different radii and a linear interpolation between them as values move around the circle.*/            
operator Layout base CircularLayout[start: 0, size: 10]