import Layouts
import Geometry : Geo

stream RawLines(text) from Text["./AliceInWonderland.txt", sep:"$^", skip:0]

stream Lines (line, text)
from RawLines
   line: Count()
   text: text

stream RawWords (line, word)
from Lines
   line: line
   word: SplitOn(text, "\\s+") -> Map(@NormalizeWords, *) -> *

operator NormalizeWords(word) -> (word)
  default => word: Strip(word) -> ToLower(_)

   
stream Words (line, word)
from RawWords
   filter(prefilter.stopWord !~ "true", word !~ "")
   prefilter(stopWord) : StopWords(word)
   line: line
   word: word

stream PrimeCenter ()
from Words
 () : LineIndex.get(word) -> ExtendTuple(LineIndex.0, line) -> LineIndex.put(word, ExtendTuple.*)
 () : WordCount(word)

layer Border["TEXT"]
from Lines
   ID: line
   TEXT: text
   (X,Y):* Layout(line)


layer Center["TEXT"]
from Words
   ID: word
   TEXT: word
   (X,Y):* Centroid(word) -> Contract(Centroid.X, Centroid.Y) 
   REGISTRATION: "CENTER"
   (COLOR, FONT):* 
        [count] WordCount.query(word) -> Range[ALL](@Max, _) -> 
        [freq]  Divide(count, _) -> 
        [color] HeatScale[hot: "BLUE", cold: "GRAY30"](freq) ->
                Scale[min: 50, max:1000](freq) -> Font{{_}} -> (color, _)

operator WordCount : Count

operator LineIndex : Dict[fields: "lines"]

operator Centroid (word) -> (X,Y)
  default =>
    (X,Y): LineIndex.get(word) -> [Points] Map.query(LineIndex.0 , @Layout) 
            -> Select[field: 0](Points.*) -> Values(*) -> [X] Mean(_)
            -> Select[field: 1](Points.*) -> Values(*) -> [Y] Mean(_)
            -> (X,Y)
            

/*TODO: Do two circular layouts of different radii and a linear interpolation between them as values move around the circle.*/            
operator Layout : CircularLayout[start: 0, size: 10, ratio: .75]
operator Contract : Geo::Scale[by: .94]

