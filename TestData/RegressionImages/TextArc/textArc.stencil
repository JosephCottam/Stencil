STREAM: File
NAME: RawLines
HEADER: text
SEPARATOR: $^
SOURCE: ./AliceInWonderland.txt
SKIP: 0
STRICT: true

stream RawLines(text)

stream Lines (line, text)
from RawLines
   line: Counter()
   words: text

stream RawWords (line, word)
from Lines
   line: line
   word: Split(text, "\\s+") >> Strip(_) -> ToLower(_)
   
stream Words (line, word)
from RawWords
   filter(stopWord !~ "true", word !~ "")
   prefilter(stopWord) : StopWords(word)
   line: line
   word: word

stream PrimeCenter ()
from Words
 () : LineIndex.query(word) -> Extend(_, line) -> LineIndex.put(word, _)
 () : WordCount(word)


operator Extend (current, more) -> (full) 
  (current = NULL) => full : more 
  (ALL)            => full : Concatenate(current, ",", more)
  
layer Border[TEXT]
from Lines
   ID: line
   TEXT: text
   (X,Y):* Layout(line) 


layer Center[TEXT]
from Words
   ID: word
   TEXT: word
   (X,Y):* Centroid(word) -> Contract(X,Y) 
   (FONT_COLOR, FONT_SIZE):* 
        WordCount.query(word) -[count]> Max[range: ALL](_) -> Divide(count[_], _) -[freq]> 
				HeatScale[hot: "BLUE", cold: "GRAY30"](freq[_]) -[color]>
				Scale[min: 50, max:1000](freq[_]) -> (color[_],_)

operator WordCount base Count

operator LineIndex base Mapping[fields: "lines"]

/*TODO: Add a labeling facility to Fold so LineIndex/Split/Layout only need to be done once.*/
operator Centroid (word) -> (X,Y)
  (ALL) =>
    (X): LineIndex(word) -> Split(_, ",") 
            >> Layout.query(_) >-
            Select[field: 0](LAST) -> Average[range: LAST](*)
    (Y): LineIndex(word) -> Split(_, ",") 
            >> Layout.query(_) >-
            Select[field: 1](LAST) -> Average[range: LAST](*)

/*TODO: Do two circular layouts of different radii and a linear interpolation between them as values move around the circle.*/            
operator Layout base CircularLayout[start: 0, size: 10]
operator Contract (X,Y) -> (X,Y)
 (ALL) =>  X : Mult(X, .06) -[shift]> Mult(X, .88) -> Add(shift[_],_)
           Y : Mult(Y, .06) -[shift]> Mult(Y, .88) -> Add(shift[_],_)