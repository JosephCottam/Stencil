STREAM: File
NAME: Words
HEADER: line, word
SEPARATOR: \s*,\s*
SOURCE: ./AliceInWonderland.csv
SKIP: 1
STRICT: true

stream Words(line, word)

order Words

layer Border[TEXT]
from Words
   ID: line
   TEXT: GetExisting(line)  -> Concatenate(prior, " ", word)
   (X,Y):* CircularLayout(line) 
   REGISTRATAION: "Center"

layer prime
from Words
   (): CircularLayout(line) -> Centroid.put(word, X,Y)


layer Center[TEXT]
from Words
   ID: word
   (X,Y) :* Centroid.query(word)
   TEXT: word
   FONT_COLOR: FreqColor(word)
   FONT_SIZE: FreqSize(word)

operator GetExisting (l) -> (prior) 
  prefilter(exists) : Border.contains(l)
  (exists =~ "true") => prior: Border.find(l) -> TEXT
  ALL => prior: ""
   
operator FreqColor(word) -> (C)
  (ALL) => C: Freq(word) 
             -> HeatScale[cold: "Gray10", hot: "Gray90"](freq)

operator FreqSize(word) -> (size)
  (ALL) => size: Freq(word) 
             -> Scale[min: 0, max: 20](freq)

operator Freq (word) -> (freq)
  (ALL) => freq: Count(word) -[count]> Max[range: ALL](_) 
           -> Div(count[_], _)


python Centroid
facet init {average = {}}
facet put(word, x,y) -> (x,y) {
   (sx,sy,c) = (0,0,0)
   if (average.has_key(word)) :
       (sx,sy,c) = average[word]
   
   c  = c +1
   sx = (sx + x)
   sy = (sy + y)
   
   average[word] = (sx,sy,c)
   x = sx/c
   y = sy/c
}
facet query(word) -> (x,y) {
   (sx,sy,c) = (0,0,1)
   if (average.has_key(word)) :
       (sx,sy,c) = average[word]
   x = sx/c
   y = sy/c
}


python CircularLayout
facet init {
    from math import *
    max =0
}
facet map(Seq) -> (X,Y) {
    Seq = float(Seq) +1
    if (Seq > max): max=Seq

    radius = sqrt(max)+ max/100 * 20
    offset = (Seq/max)*360*0.01745   #to radians

    X = radius * cos(offset)
    Y = radius * sin(offset)
}
facet query(Seq) -> (X,Y) {
    Seq = float(Seq) +1

    radius = sqrt(max)+ max/100 * 20
    offset = (Seq/max)*360*0.01745   #to radians

    X = radius * cos(offset)
    Y = radius * sin(offset)
}
