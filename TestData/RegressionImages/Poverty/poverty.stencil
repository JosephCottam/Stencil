STREAM: File
NAME: Region
HEADER: State  Region  Division
SEPARATOR: \s\s+
SOURCE: ./regions.txt
STRICT: TRUE
SKIP: 1
STREAM: File
NAME: Poverty
HEADER: State,Children, Adults, Elderly, Total
SEPARATOR: ,
SOURCE: ./povertyPercent.csv
STRICT: TRUE
SKIP: 1
STREAM: File
NAME: Postal
HEADER: State  ID
SEPARATOR: \s\s+
SOURCE: ./postal.txt
STRICT: TRUE
SKIP: 0
STREAM: File
NAME: Pop
HEADER: State,Children,Adults,Elderly, Total
SEPARATOR: ,
SOURCE: ./povertyCounts.csv
STRICT: TRUE
SKIP: 1
STREAM: File
NAME: Items
HEADER: Name
SEPARATOR: ,
SOURCE: ./items.txt
STRICT: TRUE
SKIP: 0

external stream Items(Name)
external stream Postal(State, ID)
external stream Region(State, Region, Division)
external stream Pop(State,Total,Children,Adults,Elderly)
external stream Poverty(State,Children)

order (Items | Postal | Region | Pop) > Poverty

canvas Main
	guide sidebar[displayOn="FILL_COLOR", X=350, Y=100] from Children FONT_COLOR
		example.SHAPE: "RECTANGLE"
		label.FONT_SIZE: 10
		example.SIZE: 12

layer Labels[TEXT]
from Items
	ID : Name
	TEXT: Name
	Y: -20
	X: XLayout(Name) -> (X)
	FONT_SIZE: 15
	WIDTH: 60
	FONT_COLOR: @color(GRAY40)

layer Prime
from Postal
	() : Abr.Put(State, ID) -> ()
from Region
	() : Reg.Put(State, State, Region, Division) -> ()
from Pop
	() : Pop.Put(State, State, Total,Children,Adults,Elderly) -> ()


operator Pop base Mapping [1 .. n, "State", "Total", "Children", "Adults", "Elderly", CaseInsensitive=1]
operator Reg base Mapping [1 .. n, "State", "Region", "Division", CaseInsensitive=1]
operator Abr base Mapping [1 .. n, "id", CaseInsensitive=1]

layer Children[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State)
	X: XLayout("Children")
	Y<< Rank(Children, State) -> Mult(15, VALUE) 
	FONT_COLOR:  Reg(State) #-> Color(Division)

layer Children2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Children") -> Add(30, X) -> (VALUE)
	Y << Pop(State) -> Rank(Children, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR << Children.Find(State) ->Rename["Y1"](Y) -> Y1
					| Children2.Find(State) -> Rename["Y2"](Y) -> Y2
					| Sub(Y1, Y2) -> Abs(VALUE) -> Div(VALUE,765) -> VALUE
					| Reg(State) -> Division
					--> Color2(Division, VALUE) -> C


layer Total[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Total") -> (X)
	Y << Rank(Total, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR: Reg(State) -> Color(Division) -> C

layer Total2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Total") -> Add(30, X) -> (VALUE)
	Y << Pop(State) -> Rank(Total, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR << Children.Find(State) ->Rename["Y1"](Y) -> Y1
					| Children2.Find(State) ->Rename["Y2"](Y) -> Y2
					| Sub(Y1, Y2) -> Abs(VALUE) -> Div(VALUE,765) -> VALUE
					| Reg(State) -> Division
					--> Color2(Division, VALUE) -> C


layer Elderly[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Elderly") -> (X)
	Y << Rank(Elderly, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR: Reg(State) -> Color(Division) -> C

layer Elderly2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Elderly") -> Add(30, X) -> (VALUE)
	Y << Pop(State) -> Rank(Elderly, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR << Children.Find(State) ->Rename["Y1"](Y) -> Y1
					| Children2.Find(State) ->Rename["Y2"](Y) -> Y2
					| Sub(Y1, Y2) -> Abs(VALUE) -> Div(VALUE,765) -> VALUE
					| Reg(State) -> Division
					--> Color2(Division, VALUE) -> C


layer Adults[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Adult") -> (X)
	Y << Rank(Adults, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR: Reg(State) -> Color(Division) -> C

layer Adults2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Adult") -> Add(30, X) -> (VALUE)
	Y << Pop(State) -> Rank(Adults, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR << Children.Find(State) ->Rename["Y1"](Y) -> Y1
					| Children2.Find(State) ->Rename["Y2"](Y) -> Y2
					| Sub(Y1, Y2) -> Abs(VALUE) -> Div(VALUE,765) -> VALUE
					| Reg(State) -> Division
					--> Color2(Division, VALUE) -> C


operator Color2 (State, Alpha) -> (C)
(all) => (C): Color(State) -> C
					| Mult(Alpha,.5) -> Add(.25, VALUE) -> VALUE  /*Squish ragne to .25-.75*/
				  	| SetAlpha(VALUE, C) -> VALUE
					--> VALUE

operator Color(Division) -> (C)
(Division =~ "USA") => (C) : @color(GRAY40)
(Division =~ "New England") => (C) : @color(GREEN, .5)
(Division =~ "Mid Atlantic") => (C) : @color(DARKGREEN, .5)
(Division =~ "East North Central") => (C) : @color(TURQUOISE, .75)
(Division =~ "West North Central") => (C) : @color(SKYBLUE, .75)
(Division =~ "Atlantic") => (C) : @color(SANDYBROWN, .5)
(Division =~ "East South Central") => (C) : @color(RED, .5)
(Division =~ "West South Central") => (C) : @color(DARKORANGE, .5)
(Division =~ "Mountain") => (C) : @color(PURPLE, .5)
(Division =~ "Pacific") => (C) : @color(VIOLET, .5)
(all) => (C) : @color(RED)

operator XLayout (Name) -> (X)
(Name =~ "Total") => (X) : 0
(Name =~ "Children") => (X) : 80
(Name =~ "Adult") => (X) : 160
(Name =~ "Elderly") => (X) : 240

operator Ordering (ID) -> (VALUE) 
	all => VAlUE : Index(ID) -> VALUE
