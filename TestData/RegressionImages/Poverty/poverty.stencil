STREAM: File
NAME: Regions
HEADER: State  Region  Division
SEPARATOR: \s\s+
SOURCE: ./regions.txt
SKIP: 1
STRICT: true
STREAM: File
NAME: Poverty
HEADER: State, Children, Adults, Elderly, Total
SEPARATOR: ,
SOURCE: ./povertyPercent.csv
SKIP: 1
STRICT: true
STREAM: File
NAME: Postal
HEADER: State  ID
SEPARATOR: \s\s+
SOURCE: ./postal.txt
SKIP: 0
STRICT: true
STREAM: File
NAME: Pop
HEADER: State,Children,Adults,Elderly,Total
SEPARATOR: ,
SOURCE: ./povertyCounts.csv
SKIP: 1
STRICT: true
STREAM: File
NAME: Items
HEADER: Name
SEPARATOR: ,
SOURCE: ./items.txt
SKIP: 0
STRICT: true

stream Items(Name)
stream Postal(State, ID)
stream Regions(State, Region, Division)
stream Pop(State,Total,Children,Adults,Elderly)
stream Poverty(State,Children, Adults, Elderly, Total)

order (Items | Postal | Regions | Pop) > Poverty

canvas Main
	guide sidebar[sample: "CATEGORICAL", displayOn: "FILL_COLOR", X: 350, Y: 100, example.SIZE: 12] from Children FONT_COLOR
		example.SHAPE: "RECTANGLE"
        label.FONT_SIZE: 10

layer Labels[TEXT]
from Items
	ID : Name
	TEXT: Name
	Y: -20
	X: XLayout(Name) -> (X)
	FONT_SIZE: 15
	WIDTH: 60
	FONT_COLOR: @Color{GRAY40}

layer Prime
from Postal
	() : Abr.put(State, ID) -> ()
from Regions
	() : Reg.put(State, Region, Division) -> ()
from Pop
	() : Pop.put(State, Total, Children, Adults, Elderly) -> ()


operator Pop base Mapping [fields: "Total, Children, Adults, Elderly", CaseInsensitive: 1]
operator Reg base Mapping [fields: "Region, Division", CaseInsensitive: 1]
operator Abr base Mapping [fields: "id", CaseInsensitive: 1]

layer Children[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State)
	X: XLayout("Children")
	Y:* Rank(Children, State) -> Mult(15, VALUE) 
	FONT_COLOR:  Reg(State) -#> Coloring(Division)

layer Children2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Children") -> Add(30, X) -> (VALUE)
	Y :* Pop(State) -> Rank(Children, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR :* Children.find(State) -[L1]>
				  Children2.find(State) -[L2]>
				  Sub(L1[Y], L2[Y]) -> Abs(_) -> Div(_,765) -[Delta]>
				  Reg(State) -> Color2(Division, Delta[_]) -> C


layer Total[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Total") -> (X)
	Y :* Rank(Total, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR: Reg(State) -> Coloring(Division) -> C

layer Total2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Total") -> Add(30, X) -> (VALUE)
	Y :* Pop(State) -> Rank(Total, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR :* Total.find(State) -[L1]>
				  Total2.find(State) -[L2]>
				  Sub(L1[Y], L2[Y]) -> Abs(_) -> Div(_,765) -[Delta]>
				  Reg(State) -> Color2(Division, Delta[_]) -> C


layer Elderly[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Elderly") -> (X)
	Y :* Rank(Elderly, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR: Reg(State) -> Coloring(Division) -> C

layer Elderly2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Elderly") -> Add(30, X) -> (VALUE)
	Y :* Pop(State) -> Rank(Elderly, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR :* Elderly.find(State) -[L1]>
				  Elderly2.find(State) -[L2]>
				  Sub(L1[Y], L2[Y]) -> Abs(_) -> Div(_,765) -[Delta]>
				  Reg(State) -> Color2(Division, Delta[_]) -> C


layer Adults[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Adult") -> (X)
	Y :* Rank(Adults, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR: Reg(State) -> Coloring(Division) -> C

layer Adults2[TEXT]
from Poverty
	ID: State
	TEXT: Abr(State) -> id
	X: XLayout("Adult") -> Add(30, X) -> (VALUE)
	Y :* Pop(State) -> Rank(Adults, State) -> Mult(15, VALUE) -> VALUE
	FONT_COLOR :* Adults.find(State) -[L1]>
				  Adults2.find(State) -[L2]>
				  Sub(L1[Y], L2[Y]) -> Abs(_) -> Div(_,765) -[Delta]>
				  Reg(State) -> Color2(Division, Delta[_]) -> C


operator Color2 (State, Alpha) -> (C)
(ALL) => (C): Coloring(State) -[Root]> 
					Mult(Alpha,.5) -> Add(64, VALUE) ->
				  	SetAlpha(VALUE, Root[C]) -> VALUE

operator Coloring(Division) -> (C)
(Division =~ "USA") => (C) : @Color{GRAY40}
(Division =~ "New England") => (C) : @Color{GREEN, 128}
(Division =~ "Mid Atlantic") => (C) : @Color{DARKGREEN, 128}
(Division =~ "East North Central") => (C) : @Color{TURQUOISE, 192}
(Division =~ "West North Central") => (C) : @Color{SKYBLUE, 192}
(Division =~ "Atlantic") => (C) : @Color{SANDYBROWN, 128}
(Division =~ "East South Central") => (C) : @Color{RED, 128}
(Division =~ "West South Central") => (C) : @Color{DARKORANGE, 128}
(Division =~ "Mountain") => (C) : @Color{PURPLE, 128}
(Division =~ "Pacific") => (C) : @Color{VIOLET, 128}
(ALL) => (C) : @Color{RED}

operator XLayout (Name) -> (X)
(Name =~ "Total") => (X) : 0
(Name =~ "Children") => (X) : 80
(Name =~ "Adult") => (X) : 160
(Name =~ "Elderly") => (X) : 240

operator Ordering (ID) -> (VALUE) 
	ALL => VAlUE : Index(ID) -> VALUE
