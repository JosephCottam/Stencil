stream raw(trash, target, trash2, type, size, trash3, trash4, source, trash5, timestamp) 
  : Text[file: "AM_log", sep:",|]|\\s+", strict:false]

stream raw2(trash, target, trash2, type, size, trash3, trash4, source, trash5, timestamp) 
  : Text[file: "AM_log", sep:",|]|\\s+", strict:false]

stream comm(source, target, size, time, tag)
from raw
  filter(type=~".*received.*")
  (source, target, size, time,tag): (source, target, size, timestamp, "set1")
from raw2
  filter(type=~".*received.*")
  (source, target, size, time,tag): (source, target, size, timestamp, "set2")


operator Spacer(v) -> (v) 
    default => v : Range[ALL](@Max, _)
    
layer baseline["LINE"]
from comm
   ID: Concatenate(source, tag)
   X1:* FullMin(time)->Timescale(_,tag)
	X2:* Timescale(time,tag) -> FullMax(_)
	PEN_COLOR: Color{Gray90}
	(Y1, Y2): Layout(source,tag) -> (_,_)

layer coms["LINE"]
from comm
   filter(tag=~"set1")
   ID: Count() -> Concatenate(_,tag)
   Y1:* Layout(source, tag)
   Y2:* Layout(target, tag)
	(X1,X2):* Timescale(time,tag) -> (_,_)
	PEN_COLOR : Color{SlateBlue}
	CAP2: "ARROW"
from comm
   filter(tag=~"set2")
   ID: Count() -> Concatenate(_,tag)
   Y1:* Layout(source, tag)
   Y2:* Layout(target, tag)
	(X1,X2):* Timescale(time,tag) -> (_,_)
	PEN_COLOR : Color{FireBrick}
	CAP2: "ARROW"

operator WeightByOp(op) -> (W)
	(op =~ "osend") => W : Stroke{1}
 	(op =~ "orecv") => W : Stroke{1}
	(op =~ "transmission") => W: Stroke{5}
	default => W: Stroke{2}
   
	
operator Layout (rank,tag)->(Y)
  default => (Y) : 
       Index(rank) -> [Ranks] FullMax(_) 
        -> Index(tag) -> Mult(Ranks, 30) -> [Offset] Mult(Index, _) 
        -> Mult(-20, rank) -> Add(_, Offset)

operator Timescale(time,tag) -> (time)
   (tag = "set1") => time : FullMin(time) -> Sub(time, _) ->  Mult(_, 5000)
   (tag = "set2") => time : FullMin(time) -> Sub(time, _) ->  Mult(_, 5000)

