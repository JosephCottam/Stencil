STREAM: File
NAME: Words
HEADER: 
SEPARATOR: 
SOURCE: 
SKIP: 0
STRICT: true

stream Words(word, line)

order Words

canvas Main
   guide pointLabels from Words ID

layer Border[TEXT]
from Words
   ID: line
   TEXT: GetExisting(line)  -> Concatenate(prior, " ", word)
   (X,Y):* CircularLayout(line) -> Centroid.put(word, x,y)
   REGISTRATAION: "Center"

layer Center[TEXT]
from Words
   ID: word
   (X,Y) :* Centroid(word)
   TEXT: word
   TEXT_COLOR: FreqColor(word)
   TEXT_SIZE: FreqSize(word)
   
operator Prior(line) -> (text) 
  prefilter(t) : Border.find(line)
  (t =~ "[null]") => text: ""
  (ALL) => text: t[text]

operator FreqColor(word) -> (C)
  (ALL) => C: Freq(word) 
             -> Linear[start: "Gray10", end: "Gray90"](div)

operator FreqSize(word) -> (size)
  (ALL) => size: Freq(word) 
             -> Linear[start: "0", end: "20"](div)

operator Freq (word) -> (freq)
  (ALL) => freq: Count(word) -> Max[range: ALL](_) 
           -> Div(count, max)


python Centroid
facet init {average = {}}
facet put(word, x,y) -> (x,y) {
   (sx,sy,c) = (0,0,0)
   if (average.has_key(word)) :
       (sx,sy,c) = average[word]
   
   c  = c +1
   sx = (sx + x)
   sy = (sy + y)
   
   average[word] = (sx,sy,c)
   x = sx/c
   y = sy/c
}
facet get(word) -> (x,y) {
   (sx,sy,c) = (0,0,1)
   if (average.has_key(word)) :
       (sx,sy,c) = average[word]
   x = sx/c
   y = sy/c
}


python CircularLayout
facet init {
	from math import *
	max =0
}

facet query(Seq) -> (X,Y) {
	Seq = float(Seq) +1
	if (Seq > max): max=Seq

	radius = sqrt(max)+ max/100 * 20
	offset = (Seq/max)*360*0.01745   #to radians

	X = radius * cos(offset)
	Y = radius * sin(offset)
}
