STREAM: File
NAME: Edges
HEADER: ID1,ID2
SEPARATOR: ,
SOURCE: ./er_100_0.005.adj
CHECKHEADER: true

external stream Edges (ID1, ID2)


/*Layout values in a circle.  Circle radius grows as value count increases.*/

layer Nodes
from Edges
	ID: ID1
	REGISTRATION : "CENTER"
	(SHAPE, FILL_COLOR, SIZE) : ("ELLIPSE", @color(MAROON), 2)
	(X,Y):* Ordering(ID1) -> Circular.Query(VALUE) -> (X,Y)
from Edges
	ID: ID2
	REGISTRATION : "CENTER"
	(SHAPE, FILL_COLOR, SIZE) : ("ELLIPSE", @color(MAROON), 2)
	(X,Y):* Ordering(ID2) -> Circular.Query(VALUE) -> (X,Y)

layer Edges[LINE]
from Edges 
	ID: Concatenate(ID1,ID2) -> (VALUE)
	(X.1, Y.1):* Nodes.Find(ID1) -> (X,Y)
	(X.2, Y.2):* Nodes.Find(ID2) ->  (X,Y)
	STROKE_COLOR: @color(GRAY80, .8)
	STROKE_WEIGHT: .25


operator Ordering (ID)->(VALUE)  
	(all) => VALUE : Index(ID) -> (VALUE)

python Circular
facet Init {
	from math import *
	max =0
}

facet Query(Seq) -> (X,Y) {
	Seq = float(Seq) +1
	if (Seq > max): max=Seq

	radius = sqrt(max)+ max/100 * 20
	offset = (Seq/max)*360*0.01745   #to radians

	X = radius * cos(offset)
	Y = radius * sin(offset)
}
