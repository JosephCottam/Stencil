STREAM: File
NAME: Edges
HEADER: ID1,ID2
SEPARATOR: ,
SOURCE: ./er_100_0.005.adj
CHECKHEADER: true

stream Edges (ID1, ID2)


/*Layout values in a circle.  Circle radius grows as value count increases.*/

layer Nodes
from Edges
	ID: ID1 
	FILL_COLOR: @Color{MAROON}
	(X,Y):* Ordering(ID1) -> Circular.query(VALUE) -> (X,Y)
	(REGISTRATION, SHAPE, SIZE) : ("CENTER", "ELLIPSE", 2)
from Edges
	ID: ID2
	FILL_COLOR: @Color{MAROON}
	(X,Y):* Ordering(ID2) -> Circular.query(VALUE) -> (X,Y)
	(REGISTRATION, SHAPE, SIZE) : ("CENTER", "ELLIPSE", 2)

layer Edges[LINE]
default
	PEN_COLOR: @Color{GRAY80, .8}
from Edges 
	ID: Concatenate(ID1,ID2) -> (VALUE)
	(X.1, Y.1):* Nodes.find(ID1) -> (X,Y)
	(X.2, Y.2):* Nodes.find(ID2) ->  (X,Y)
	PEN: @Stroke{.25}

operator Ordering (ID)->(VALUE)  
	(ALL) => VALUE : Index(ID) -> (VALUE)

python Circular
facet init {
	from math import *
	max =0
}

facet query(Seq) -> (X,Y) {
	Seq = float(Seq) +1
	if (Seq > max): max=Seq

	radius = sqrt(max)+ max/100 * 20
	offset = (Seq/max)*360*0.01745   #to radians

	X = radius * cos(offset)
	Y = radius * sin(offset)
}
