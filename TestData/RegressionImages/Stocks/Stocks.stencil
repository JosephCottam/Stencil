import Dates

stream Stocks(Date, Open) from Text["./google_stocks.csv"] 


stream AlignedStocks(Date, Open)
from Stocks
  Date : Parse[f:"dd-MMM-yy"](Date)
  Open : Open

layer Ticker["POLY_POINT"]		/*Poly-point is a group of groups of line segments.*/
guide
   axis Linear from Y
   axis[unit: "MONTH"] Date from X
     label.TEXT: Parse.format[f:"MMM yy"](Input)

from AlignedStocks
   ID: TimeStep(Date) 
   GROUP: "Google"
   ORDER: Count()
   X: TimeStep(Date)
   Y: Open  
   PEN: Stroke{1}
   PEN_COLOR: Color{BLUE}

layer Averages["POLY_POINT"] 
from AlignedStocks
   ID: Ids()
   GROUP: "Google_30"
   ORDER: Count()
   X: TimeStep(Date)
   Y: Range["-30..n"](@Mean, Open)	    /*Average the most recent 30 values.*/
   PEN: Stroke{1}
   PEN_COLOR: Color{LIME,150}
from AlignedStocks
   ID: Ids()
   GROUP: "Google_ALL"
   ORDER: Count()
   X: TimeStep(Date)
   Y: Range[ALL](@Mean, Open)		    /*Average all values.*/
   PEN: Stroke{1}
   PEN_COLOR: Color{CRIMSON,150}
from AlignedStocks
   ID: Ids()
   GROUP: "Google_20"
   ORDER: Count()
   X: TimeStep(Date)
   Y: Range["-30 .. -10"](@Mean, Open) /*Average that lags by 10 and includes 20 values.*/
   PEN: Stroke{1}
   PEN_COLOR: Color{ORANGE,150}

operator Ids : Count 

operator TimeStep (T) -> (S)
default => (S) : Range[ALL](@DateMin, T) 
                   -> DateDiff("DAYS", Range, T) 
                   -> Mult(_, 3)

operator DateMin : Min[c:"Date"]  
