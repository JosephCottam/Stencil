stream Zips (Zip, X,Y,City,State) 

table: ZipCodes["Dict"]
 from: Zips
    (Zip, X,Y,City,State) : (Zip,X,Y,City, State)
    Order: Zip

layer: scribble
  from: ZipCodes
    group: State
    order: zip
    (x,y): (x,y)
    color: Coloring(state)
    

BECOMES
(stream Zips (Zip, X,Y,City,State))

(table ZipCodes["Dict"]
  (from zips
    (bind ((Zip, X,Y,Cist,State, Order) (Zip,X,Y,City,State,Zip)))))
    
    
(layer scribble
  (from zipCodes
    (let ((#coloring (Coloring state))
      (bind ((group, order,x,y,color) (State, zip, x, y, #coloring.0)))))
    
   
BECOMES

(stream Zips (Zip, X,Y,City,State))

(rule zips (ZipCodes.bind (Zip, X,Y,Cist,State, Order) (Zip,X,Y,City,State,Zip)))

(rule zipCodes 
   (let ((#coloring (Coloring state))
         (scribble.bind (group, order,x,y,color) (State, zip, x, y, #coloring)))

(operator ZipCodes (table [type: "Dict"]))
(operator scribble (layer [type: "shape"]))


stream data(v) from Text["StdIn"]

table subset
from data
  filter(prefilter.#keep)
  prefilter(#keep) : sample1.keep(data.*)
  v : v
  time: CurrentMillis() -> [Min] Range[ALL](v, @Min) -> Sub(CurrentMillis,Min)
from data
  () : sample1.reduce() -> subset.remove(sample1.*)
  


layer scope["scopeWrapper"]
from subset
  (table): subset.tuples() -> *


(group scope
  stream tableData(table)

  layer scopePlot["scopeBasis"]
   from tableData
     ID: Count()
     (v,time): MultiResult(*) -> *
     (): Sub1(ID) -> scopePlot.delete(_)
)

layer scope["polyline"]
from subset  
  ID: Count1()
  X:* Scale2[0,100](time)
  Y: Scale3[0,100](v)
