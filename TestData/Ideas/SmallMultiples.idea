group BarChart 
    data Cat
    data Value

    item Title["Text"]
    default
       Reg: CENTER
    from data
       X : Center(Parent[Bounds]) -> X
       Y : Sub(Parent[Bounds][Y], Parent[Bounds][HEIGHT]) -> Sub(_, 10)

    layer Bars["SHAPE"]
    from properties(Cat, Value)
      ID: Cat
      (X1, X2) : Index(Cat) -> (_,_) 
      (Y1, Y2) : (0, value)


stream values(Type, Cat, Value)

layer Mutliples[BarChart]
  from values
      ID: Type
      Title.TEXT: Type
      Cat: Cat
      Value: Value
      (X,Y): layout(Type)

A glyph will define a compound object.  It automatically gets what 
all glyphs do: X,Y,ID.  By default, properties of elements (glyph & item)
are accessible by prefixing the property with the entity name (like 'Title').
Any additional properties are defined in a 'properties' statement (properties
can define ID,X,Y in which case when they are set on the root glyph, the internals
can be re-arranged). Properties defines a stream that can be consumed by 
rules in any element.

Positional information on elements of a glyph are relative to the top-left of the glyph.
This, in-essence, makes a glyph a private canvas.  A 'canvas' operator 
will convert from the local space to the global canvas space.



Here is a labeled shape glyph:
group Axis
   data INPUT
   data OUTPUT
   data Orient : "V"
   data Align : "BOTTOM"
   data TickSize : 5
   data Baseline : 0

   element["LINE"] line
   from  data
   filter(Orient =~ "V")
      X1 : Range[ALL](@Min, OUTPUT)
      X2 : Range[ALL](@Max, OUTPUT)
      (Y1,Y2) : (Baseline, Baseline)
   filter(Orient =~ "H")
      Y1 : Range[ALL](@Min, OUTPUT)
      Y2 : Range[ALL](@Max, OUTPUT)
      (X1,X2) : (Baseline, Baseline)

   layer["LabeledTick", ID: "Auto", Align: "Bottom"]
   from data
   filter(Orient =~ "V")
      X1,X2: OUTPUT, OUTPUT
      Y1: Div(TickSize, 2) -> Add(Baseline, _)
      Y2: Div(TickSize, 2) -> Sub(Baseline, _)



group LabeledTick
   data Spacing : 5     //properties that can be set in stream or specializer
   data Align   : "BOTTOM"  //Setting in specializer is the same as setting a new default for the instance
   data X1:0            //You may also walk the hierarchy and set any property, 
   data Y1:0            //  though data-based binding happens second 
   data X2:0            // (so setting Tick.X1 works, but will be overwritten,
   data Y2:0            //  but Tick.PEN will have an effect).
   data TEXT:"" 

   element["LINE"] Tick
   from data
      (X1,Y1,X2,Y2) : (X1,Y1,X2,Y2)

   element["TEXT"] Label
   from data
    REG : Align
        TEXT: TEXT
        (X, Y) : RegisterP(X1,Y1,X2,Y2, ALIGN)  //RegisterP (x,y,x,y) -> x,y; result is the registration of the bounding box
                        // that contains the points



