STREAM: File
NAME: flowers
HEADER: sepalLength, petalWidth, sepalWidth, petalLength, species, obs
SEPARATOR: \s*,\s*
SOURCE: ./AndersonsFlowers.csv
SKIP: 1
STRICT: true

import BrewerPalettes

const WIDTH: 110
const HEIGHT: 110

canvas ScatterPlot
  stream data(obs, dep, ind, cat)

  layer Plot
    guide Bounds[color: "Gray30"] from ScatterPlot
          axis form X
          axis from Y
  from data
     ID: obs
     X:* Scale[min: 0, max:100](dep)
     Y:* Scale[min: 0, max:100](ind) -> Mult(_,-1)
     FILL_COLOR: BrewerColors(cat) -> SetAlpha(50,_)
     REGISTRATION: "CENTER"



canvas Main
  stream flowers(sepalL, petalW, sepalW, petalL, species, obs)

  layer Scatters[ScatterPlot]
     axis from Y
       X: XSort(Input) -> Mult(_, WIDTH)
  from flowers
     local (dID, iID, dep, ind) : PCross(flowers.*)
     ID: Concatenate(local.dID, local.iID)
     (dep, ind): (local.dep, local.ind) 
     obs: obs
     cat: species
     X:* XSort(local.dep) -> Mult(_, WIDTH)
     Y:* YSort(local.ind) -> Mult(_, HEIGHT)
     guide.X.Visible: XSort(local.dep) -> Alternate(_) -> Zero(_)
     guide.Y.Visible: XSort(local.dep) -> Alternate(_) -> Zero(_)

operator XSort : Sort
operator YSort : Sort

Requires a prototyped-cross operator PCross:
   (tuple, nameÉ) -> MultiResultTuple : (ID, V1,V2)
   Each possible ID pair will appear as an ID AND the corresponding values
  

If you want different instances  of ops for different instances of the sub-schema, split on Parent.ID
	//Requires a parent tuple in the default env; will be empty for the main canvas