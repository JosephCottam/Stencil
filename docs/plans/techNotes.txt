Variables:
 * You need a way to refer to a "current value" sometimes.  
   Especially with interaction.
 * Needs to be more like a value, than a var...but the var is the name...ARG
 * (value <name> (data from ....))
 * Elsewhere (f <name> y z)
 * Is this just tables with default reference values


Binding types:
  By default, everything is stored.
  :* is dynamic binding, also stores inputs for periodic updates
  :- is non-store, but visibile in other rules (like a let*)


All of the rule groups are "policy" statements.
  Not all policy types are needed by all runtimes.
  Runtime compiliation is the last part of compliation, 
     emits warnings about ignored policy statements.
  Example policies:  data, retain, push, pull, remote (ampp extension)


Hindley-miller type inferencer in the compiler (Normal form has optional types)
Normal form programs are valid programs. 
Compiler passes assume post-normalization input,
   but may generate output that requires re-normalization
Simply Typed Lambda Calculus inferencer: https://gist.github.com/997140
    (which Will says is bad)

Expressions are king.  Nestable, inlineable...I want to be able to "address"
   the expression though, for things like the guide system

View groups tables and implicitly defines a canvas

Schema-grids are iterated VIEWS, with specific RENDERERs on one data table.
First-class guides make building guides for such view trivial

Protovis showed Lambda...now lets do COMBINATORS:  schema-grid, data-grid, guide

Animated entrance/exit:  Steal the enter/exit/update concepts from D3.
  Is a set value bindings (the initial value) and a transition rule (for each binding or for the whole block?)
  Animates from these intiail bindings to the "data" statement value vai the transition
  "Default" value is the default result of a data OR intiail value, if not specified on enter


Custom policy providers also provide a "reducing" translation of that policy to 
  non-custom policies. This can be invoked by the runtime translator.  In this
  way custom policies can recieve custom treatment in different rutnimes, but
  still be supported in all runtimes.  If a policy type does not have a reduced
  form, then the runtime errors when a program with that policy type is provided.


For Big-data...have statement type to specify sampling/confidenc/etc paramters used everywhere.
**Many operations may require that (even for preconditioning)
