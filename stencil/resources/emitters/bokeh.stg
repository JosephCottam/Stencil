infixOps ::= [
  "+":"true",
  "-":"true",
  "*":"true",
  "/":"true",
  default:false
]

// ----------------------  Expressions ----------------------
expr(ex) ::= <%
<if (ex.isLet)><ex:let()>
<elseif (ex.isPrim)><ex:prim()>
<elseif (ex.isDo)><ex:do()>
<elseif (ex.isOp)><ex:op()>
<elseif (ex.isIf)><ex:ifex()>
<elseif (ex.isList)><ex:listex()>
<else><ex:unsupported()>
<endif>
%>


unsupported(ex) ::= "UNSUPPORTED feature used!!!! (<ex>)"
let(ex) ::= <%<ex.bindings:binding();separator="\n"><\n><expr(ex.body)>%>
prim(ex) ::= "<ex.val>"
do(ex) ::= <%<ex.exprs:expr();separator="\n">%>
ifex(ex) ::= <%
if (<ex.test:expr()>):
  <ex.conseq:expr()>
<if (ex.alt)>
else:
  <ex.alt:expr()>
<endif>
%>   

op(ex) ::= <%
<if (infixOps.(ex.op))>
  <expr(first(ex.rands))> <ex.op> <expr(first(rest(ex.rands)))>
<else>
  <ex.op>(<ex.rands:expr();separator=", ">)
<endif>
%>

listex(ex) ::= <%[<ex.items:expr();separator=", ">]%>

binding(binding) ::= <%(<binding.vars:expr();separator=", ">) = <binding.expr:expr()>%>

// ----------------------  Common Table Elements ----------------------

tableSize(tdef) ::= <<
def size(self):
  return len(self.<first(tdef.fields)>)

>>

tableClear(tdef) ::= <<
def clear(self):
  <tdef.fields:{f|self.<f> = []};separator="\n">

>>

tableData(tdef) ::= <<
def dataSource(self):
  return ColumnDataSource(data=dict(<tdef.fields:{f|<f>=self.<f>};separator=",">))
>>

tableFields(fields) ::= <%_fields = [<fields:{f|'<f>'};separator=", ">]%>

init(idefs) ::= <<
<if (idefs)>
def __init__(self):
   <idefs:expr();separator="\n">
<endif>
>>

dependentUpates(def) ::= <<
def update(self):
  self.clear()
  <def.depends:{d|<dependUpdate(def.fields, d)>};separator="\n">

>>

dependUpdate(tableFields, ddef) ::= <<
for i in range(0, self._<ddef.source>.size()):
  <ddef.fields:{f|<f> = self._<ddef.source>.<f>[i]};separator="\n">
  <ddef.expr:expr()>
  <tableFields:{f|self.<f>.append(<f>)};separator="\n">
>>

setDependency(dep) ::= <<
def set_<dep.source>(self, table):
   self._<dep.source>=table
>>


dataUpdates(def) ::=<<
def data(self, <def.fields:{f|<f>};separator=", ">):
  <def.fields:{f|self.<f>.extend(<f>)};separator="\n">

def datum(self, <def.fields:{f|<f>};separator=", ">):
  <def.fields:{f|self.<f>.append(<f>)};separator="\n">

>>

table(def) ::= <<
class <def.ofClass>:
  <tableFields(def.fields)>
  <def.fields:{f|<f> = []};separator="\n">
  <if (def.depends)><def.depends:{d|_<d.source> = None};separator="\n"><endif>

  <init(def.inits)>
  <if (def.depends)><def.depends:setDependency();separator="\n"><endif>
  <if (def.depends)><dependentUpates(def)><endif>
  <dataUpdates(def)>
  <tableClear(def)>
  <tableSize(def)>
  <tableData(def)>
>>


// ---------------------- Root Class ----------------------

tableSetter(tdef) ::= <<
<if (!tdef.depends)>
def set_<tdef.name>_cols(self, <tdef.fields:{f|<f>};separator=", ">):
  self.<tdef.name>.clear()
  self.<tdef.name>.data(<tdef.fields:{f|<f>};separator=", ">)
<endif>
>>


linkTables(table) ::= <%
<if (table.depends)>
  <table.depends:{d|self.<t.name>.set_<d.source>(self.<d.source>)};separator="\n">
<endif>
%>


bindset(type, source, binds) ::= 
  <%p.<type>(data_source=self.<source>.dataSource(), <binds:{f|<f.field>=<if (f.default)><f.default><else><f.expr><endif>};separator=", ">)%>

databind(b) ::=<%
  "<b.field>" : {"field" : <b.expr><if (b.default)>, "default" : <b.default><endif>}
%>
  

renderSet(plotName,def) ::= <<
<if (def.simpleRender && def.fields)>
p.<def.type>(self.<def.source>.dataSource(), [<def.fields:{f|'<f>'};separator=", ">])
<elseif (def.simpleRender && def.binds)>
<def.binds:{d|<bindset(def.type,def.source,d)>};separator="\n">
p.figure()
<elseif (def.glyphRender)>
<def.source> = self.<def.source>.dataSource()
<def.guides:
    {g|<g.datarange> = DataRange1d(sources=[<def.source>.columns("<g.target>")])};separator="\n">
   
glyphspec = {
     <def.generalBinds:{b|"<b.field>" : <b.default>};separator=",\n"><if (def.dataBinds)>,<endif><def.dataBinds:databind();separator=",\n">})
glyph_renderer = GlyphRenderer(
   data_source = <def.source><if (def.guides)>,<endif>
   <def.guides:{g|<g.target>data_range = <g.datarange>};separator=",\n">)


<def.name> = Plot(<def.guides:{g|<g.target>_range=<g.datarange>};separator=",">,data_sources=[<def.source>], border=80)
<def.name>.renderers.append(glyph_renderer)

<def.guides:
   {g|<g.name> = LinearAxis(plot=<def.name>, dimension=<g.target><g.args:{a|<a>=<g.args.(a)>};separator=",\n">)};separator="\n">
   
sess = session.PlotServerSession(username="defaultuser", serverloc="http://localhost:5006", userapikey="nokey")
sess.add(glyph_renderer, <def.name>, <def.source>,
   <def.guides:{g|<g.name>};separator=", "><if (def.guides)>,<endif>
   <def.guides:{g|<g.datarange>};separator=", ">)
sess.use_doc("<plotName>")
sess.store_all();
<else>
***** UNKNOWN RENDERING TYPE!! ******
<endif>
>>

classDef(className,tables,view) ::= <<

<tables:table();separator="\n\n">

class <className>:
  <tables:{t|<t.name> = None};separator="\n">

  def __init__(self):
    #Create tables
    <tables:{t|self.<t.name> = <t.ofClass>()};separator="\n">
    #Share tables with each other
    <tables:{t|<linkTables(t)>};separator="\n">
  
  <tables:tableSetter()>

  def render(self):
    <tables:{t|<if (t.depends)>self.<t.name>.update()<endif>};separator="\n">
    <view.renders:{r|<renderSet(className,r)>};separator="\n">
>>

// ---------------------- Furniture ----------------------

program(def) ::= <<
<header(def.header)>

<classDef(def.header.name, def.tables, def.view)>
<footer(def.header.name)> 
>>

imports(def) ::= <%
<if ((def.items) && (def.as))>
from <def.package> import <def.items,def.as:{i,a|<i> as <a>};separator=", ">
<elseif (def.items)>
from <def.package> import <def.items;separator=", ">
<elseif (def.as)>
import <def.package> as <def.as>
<else>
import <def.package>
<endif>
%>


header(headerDef) ::= <<
#Stencil->Bokeh export for <headerDef.name>
from bokeh.objects import(Plot, DataRange1d,LinearAxis, Rule, ColumnDataSource, GlyphRenderer, ObjectArrayDataSource, PanTool,ZoomTool)
import bokeh.glyphs
from bokeh import session
<if (headerDef.imports)><headerDef.imports:imports();separator="\n"><endif>
>>



footer(name) ::= <<
if __name__ == "__main__":
  plot = <name>()
  plot.render()

>>
