infixOps ::= [
  "+":"true",
  "-":"true",
  "*":"true",
  "/":"true",
  default:false
]

// ----------------------  Expressions ----------------------
expr(ex) ::= <%
<if (ex.isLet)><ex:let()>
<elseif (ex.isPrim)><ex:prim()>
<elseif (ex.isDo)><ex:do()>
<elseif (ex.isOp)><ex:op()>
<elseif (ex.isIf)><ex:ifex()>
<else><ex:unsupported()>
<endif>
%>


unsupported(ex) ::= "UNSUPPORTED feature used!!!! (<ex>)"
let(ex) ::= <%<ex.bindings:binding();separator="\n">%>
prim(ex) ::= "<ex.val>"
do(ex) ::= <%<ex.exprs:expr();separator="\n">%>
ifex(ex) ::= <%
if (<ex.test:expr()>):
  <ex.conseq:expr()>
<if (ex.alt)>
else:
  <ex.alt:expr()>
<endif>
%>   

op(ex) ::= <%
<if (infixOps.(ex.op))>
  <expr(first(ex.rands))> <ex.op> <expr(first(rest(ex.rands)))>
<else>
  <ex.op>(<ex.rands:expr();separator=", ">)
<endif>
%>

binding(binding) ::= <%(<binding.vars:expr();separator=", ">) = <binding.expr:expr()>%>

// ----------------------  Common Table Elements ----------------------

tableSize(tdef) ::= <<
def size(self):
  return len(self.<first(tdef.fields)>)

>>

tableData(tdef) ::= <<
def data(self):
  return p.make_source(idx=range(len(self.<first(tdef.fields)>)), <tdef.fields:{f|<f>=self.<f>};separator=", ">)

>>

tableFields(fields) ::= <%_fields = [<fields:{f|'<f>'};separator=", ">]%>

init(idefs) ::= <<
<if (idefs)>
def __init__(self):
   <idefs:{def|<expr(def.expr)>};separator="\n">
<endif>
>>
// ----------------------  External Tables ----------------------

externalTable(def) ::= <<
class <def.ofClass>:
  <tableFields(def.fields)>
  <def.fields:{f|<f> = None};separator="\n">

  <init(def.inits)>

  def setData(self, **kwargs):
    if (len(kwargs) == len(self._fields)):
      <def.fields:{f|self.<f>=kwargs['<f>']};separator="\n">
    else:
      raise Exception("Data not properly supplied to table <def.name>")
     

  <tableSize(def)>
  <tableData(def)>
>>


// ---------------------- Dependent Table ----------------------

dependUpdate(tableFields, ddef) ::= <<
<if (ddef.isDepend)>
for i in range(0, self._<ddef.source>.size()):
  <ddef.fields:{f|<f> = self._<ddef.source>.<f>[i]};separator="\n">
  <ddef.expr:expr()>
  <tableFields:{f|self.<f>.append(<f>)};separator="\n">
<endif>
>>

setDependency(dep) ::= <<
def set_<dep.source>(self, table):
   self._<dep.source>=table
>>

dependentInits(dep) ::="<if (dep.isInit)><dep.expr:expr()><endif>"

dependentTable(def) ::= <<
class <def.ofClass>:
  <tableFields(def.fields)>
  <def.depends:{d|_<d.source> = None};separator="\n">
  <def.fields:{f|<f> = None};separator="\n">

  <init(def.inits)>

  <def.depends:setDependency();separator="\n">

  def update(self):
    <def.fields:{f|self.<f> = []};separator="\n">
    <def.depends:{d|<dependUpdate(def.fields, d)>};separator="\n#----------\n">

  <tableSize(def)>
  <tableData(def)>
>>


// ---------------------- Root Class ----------------------

tableSetter(tdef) ::= <<
<if (!tdef.depends)>
def set_<tdef.name>_cols(self, <tdef.fields:{f|<f>};separator=", ">):
  self.<tdef.name>.setData(<tdef.fields:{f|<f>=<f>};separator=", ">)
<endif>
>>


linkTables(table) ::= <%
<if (table.depends)>
  <table.depends:{d|self.<t.name>.set_<d.source>(self.<d.source>)};separator="\n">
<endif>
%>

bindset(type, source, def) ::= <% p.<type>('<def.x>', '<def.y>', color='<def.color>', data_source=self.<source>.data()) %>
renderSet(def) ::= <% 
<if (def.fields)>
  p.<def.type>(self.<def.source>.data(), [<def.fields:{f|'<f>'};separator=", ">])
<else>
  <def.binds:{d|<bindset(def.type,def.source,d)>};separator="\n"><\n>p.figure()
<endif>
%>

classDef(className,tables,view) ::= <<

<tables:{t|<if (t.depends)><dependentTable(t)><else><externalTable(t)><endif>};separator="\n\n">

class <className>:
  <tables:{t|<t.name> = None};separator="\n">

  def __init__(self):
    #Create tables
    <tables:{t|self.<t.name> = <t.ofClass>()};separator="\n">
    #Share tables with each other
    <tables:{t|<linkTables(t)>};separator="\n">
  
  <tables:tableSetter()>

  def render(self):
    <tables:{t|<if (t.depends)>self.<t.name>.update()<endif>};separator="\n">
    <view.renders:renderSet();separator="\n">
>>

// ---------------------- Furniture ----------------------

program(def) ::= <<
<header(def.header)>

<classDef(def.header.name, def.tables, def.view)>

<footer(def.header.name)> 
>>

header(headerDef) ::= <<
#Stencil->Bokeh export for <headerDef.name>
from bokeh import mpl 
p = mpl.PlotClient('defaultdoc', 'http://localhost:5006', 'nokey')
<if (headerDef.imports)><headerDef.imports:{e|from <e> import *};separator="\n"><endif>
<if (headerDef.literal)><headerDef.literal:{e|<e>};separator="\n"><endif>
>>



footer(name) ::= <<
def main():
  plot = <name>()
  plot.render()

>>
