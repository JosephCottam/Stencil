<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>
	<entry key="adapter:Piccolo-Dynamic">stencil.adapters.piccoloDynamic.Adapter</entry>
	<entry key="stencil:NodeLink">
		LAYER Nodes
			STREAM Order(ID)
				ID : Nodes.MakeOrFind(ID) -> (ID)
				REGISTRATION: "CENTER"
				(SHAPE, FILL_COLOR, SIZE) : ("ELLIPSE", COLOR(BLUE), 10)
				(X,Y) : Ordering(ID) -> Squarify.Main(VALUE) -> (X,Y)

		LAYER Labels
			STREAM Order(ID)
				ID: Labels.MakeOrFind(ID) -> (ID)
				(X,Y): Nodes.Find(ID) -> (X,Y)
				IMPLANTATION: "TEXT"
				(TEXT, FONT_SIZE, FONT_COLOR): (ID, 10, COLOR(GRAY60))

		LAYER Edges
			STREAM VertexList(ID1, ID2)
				ID: Concatenate(ID1,ID2)  -> Edges.MakeOrFind(VALUE) -> (ID)
				IMPLANTATION: "LINE"
				(X.1, Y.1): Nodes.Find(ID1) -> (X,Y)
				(X.2	,Y.2): Nodes.Find(ID2) ->  (X,Y)
				STROKE_COLOR: COLOR(0.3,0.3,0.3,0.8)


		LEGEND Ordering (ID)->(VALUE) BASE INDEX

		PYTHON Squarify
		@Init {
		from math import sqrt
		from math import ceil
		}
		@Main (Seq) -> (X,Y) {
		seq = int(Seq)+1
		base = int(ceil(sqrt(seq)))
		X = (seq/base) * 10 *base
		Y = (seq%base) * 10 *base
		}
	</entry>
	<entry key="stencil:VSM">
		LAYER VSM
		STREAM VertexList(ID1,ID2)
			ID : Concatenate(ID2, ID1) -> VSM.MakeOrFind(VALUE) -> (ID)
			X : Ordering(ID1) -> (VALUE)
			Y : Ordering(ID2) -> Mult(VALUE, -1) -> (VALUE)
			(FILL_COLOR, SIZE, SHAPE) : (COLOR(RED), 1, "RECTANGLE")
		STREAM VertexList(ID1, ID2)
			ID : Concatenate(ID1, ID2) -> VSM.MakeOrFind(VALUE) -> (ID)
			X : Ordering(ID2) -> (VALUE)
			Y : Ordering(ID1) -> Mult(VALUE, -1) -> (VALUE)
			(FILL_COLOR, SIZE, SHAPE) : (COLOR(RED), 1, "RECTANGLE")


		LAYER Prime
		STREAM Order(ID)
			() : Ordering(ID) -> ()

		LEGEND Ordering (ID) -> (VALUE) BASE INDEX
	</entry>
</properties>