 <project name="Stencil" default="Stencil" basedir="..">
   <taskdef resource="net/sf/antcontrib/antlib.xml">
     <classpath><pathelement location="Library/ant-contrib-1.0b3.jar"/></classpath>
   </taskdef>
   <taskdef resource="org/apache/tools/ant/antlr/antlib.xml">
     <classpath><pathelement location="Library/antlr3-ant.jar"/></classpath>
   </taskdef>
   
   <property name="core" location="Core" />
   <property name="modules" location="Modules" />
   <property name="test" location="Test" />
   <property name="explore" location="Explore" />
    
   <property name="target" location="bin" />
   <property name="runtimeLibrary" location="Library/"/>
   <property name="grammars" location ="${core}/stencil/parser/grammars/"/>
   <property name="parser" location ="${core}/stencil/parser/string/"/>
   <property name="ast" location ="/stencil/parser/tree/"/>
   <property name="interpreter" location ="${core}/stencil/interpreter/"/>
 	 	
    <target name="Stencil" depends="Transformers, Infos, Validators, Compile"/>
 	
    <!-- Just the core stencil grammar, not the additional processing.
         Which grammar is specified at the command line with -Dn=...   -->
    <target name="WG">
        <loadfile property="nDef" srcFile="lastBuild.txt" failonerror="false"/>
    	<input message="Target Grammar: " addproperty="n" defaultvalue="${nDef}"/>
    	<echo message="${n}" file="lastBuild.txt"/>
        <foreach target="antlrBuild" param="file" inheritall="true">
            <fileset dir="${grammars}" includes="**/${n}.g"/>
            <param name="antlrTarget" value="${parser}"/>
        </foreach>
    </target>
 		
    <target name="Compile">
        <mkdir dir="${target}"/> 
	<javac destdir="${target}" includeantruntime="false" source="1.5">
	<src>
	  <pathelement path="${core}"/>
	  <pathelement path="${modules}"/>
	  <pathelement path="${test}"/>
	  <pathelement path="${explore}"/>
	</src>
        <classpath>
	  <fileset dir="${runtimeLibrary}"> 
	    <include name="**/*.jar"/>
	  </fileset>
	</classpath>
        <!-- compilerarg value="-Xlint"/ -->
      </javac>
    </target>

    <!-- Just the core stencil grammar, not the additional processing.-->
    <target name="StencilGrammar">
      <antlr3
	 	target="${grammars}/Stencil.g"
	 	outputdirectory="${parser}"
	 	dir="${runtimeLibrary}"
	 />
    </target>

 	
    <!--All of the tree manipulations prior to the interpreter-->
    <target name="Transformers" depends="StencilGrammar">
        <foreach target="antlrBuild" param="file" inheritall="true">
            <fileset dir="${grammars}/transformers"/>
            <param name="antlrTarget" value="${parser}"/>
        </foreach>
    </target>
 	

    <target name="Infos" depends="StencilGrammar">
        <foreach target="antlrBuild" param="file" inheritall="true">
           <fileset dir="${grammars}/info" />
           <param name="antlrTarget" value="${parser}"/>
        </foreach>
    </target>

 	
    <target name="Validators" depends="StencilGrammar">
    	<foreach target="antlrBuild" param="file" inheritall="true">
    	   <fileset dir="${grammars}/validators" />
           <param name="antlrTarget" value="${parser}/validators"/>
    	</foreach>
    </target>

    <target name="antlrBuild" depends="antlr_classpath">
        <antlr3
          target="${file}"
          outputdirectory="${antlrTarget}"
          libdirectory="${parser}"
	 	  dir="${runtimeLibrary}"
        />          
    </target>
 	
 	<!-- Check if ANTLR3 can be found in the classpath -->
 	<target name="antlr_classpath">
	 	<whichresource property="antlr.in.classpath" class="org.antlr.Tool" />
	 	<fail message="ANTLR3 not found; use -lib ../Library/ with ant">
		 	<condition>
			 	<not>
				 	<isset property="antlr.in.classpath"/>
			 	</not>
	 		</condition>
	 	</fail>
 	</target>

 	
    <target name="Jar" depends="">
        <ant antfile="./build/Deploy.xml" inheritRefs="true" target="CompiledJar"/>
    </target> 
 	
 	<target name="Release" depends="Stencil">
 		<ant antfile="./build/Deploy.xml" inheritRefs="true"/>
	</target> 

    <target name="Release-NoBuild">
        <ant antfile="./build/Deploy.xml" inheritRefs="true"/>
    </target> 
 	
 	<!-- Just test with whatever is already built-->
 	<target name="TestFast" depends=""> 
        <ant antfile="./build/Test.xml" inheritRefs="true"/>
    </target>


    <!-- Just test with whatever is already built, but  just the specified tests-->
    <target name="TestOne" depends=""> 
        <ant antfile="./build/Test.xml" inheritRefs="true" target="OneTest"/>
    </target>

 	<target name="Test" depends="Stencil"> 
 		<ant antfile="./build/Test.xml" inheritRefs="true"/>
	</target>

 </project>
